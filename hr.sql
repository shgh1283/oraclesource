-- EMPLOYESS (scott 계정의 emp 테이블 원본)
-- EMPLOYESS 전체 조회

-- EMPLOYESS 의 first_name,last_name,job_id 조회
SELECT * FROM EMPLOYEES e;
SELECT
	FIRST_NAME,
	LAST_NAME,
	JOB_ID
FROM
	EMPLOYEES e ;
	
-- 사원번호가 176인 사원의 LAST_NAME, 부서번호 조회
-- 나는ㄴ 집가고싶어
SELECT
	EMPLOYEE_ID,
	LAST_NAME,
	DEPARTMENT_ID
FROM
	EMPLOYEES e
WHERE
	EMPLOYEE_ID = 176;
-- 연봉이 12000 이상 되는 직원들의 LAST_NAME 과 연봉조회
SELECT
	LAST_NAME ,
	SALARY
FROM
	EMPLOYEES e
WHERE
	SALARY >= 12000 ;
-- 연봉이 5000에서 12000 범위가 아닌 사람들의 LAST_NAME 과 연봉 조회
SELECT
	LAST_NAME ,
	SALARY
FROM
	EMPLOYEES e
WHERE
	SALARY > 12000
	OR SALARY <5000 ;

-- 20 번 혹은 50번 부서에서 근무하는 사원들의 LAST_NAME, 부서번호를 조회
-- 단 이름의 오름차순, 부서의 오름차순으로 정렬
SELECT
	E.LAST_NAME,
	E.DEPARTMENT_ID
FROM
	EMPLOYEES e
WHERE
	DEPARTMENT_ID IN(20, 50)
ORDER BY
	E.LAST_NAME ASC,
	E.DEPARTMENT_ID ASC ;

-- 커미션을 버는 사원들의 LAST_NAME, SALARY, COMMISSION_PCT 를 조회
-- 단 연봉의 내림차순, 커미션 내림차순으로 정렬
SELECT E.LAST_NAME, E.SALARY, E.COMMISSION_PCT FROM EMPLOYEES e
WHERE
COMMISSION_PCT > 0
ORDER BY
E.SALARY DESC,
E.COMMISSION_PCT DESC;

-- 연봉이 2500, 3500, 7000 이 아니며 JOB_ID가 SA_REP OR ST_CLERK 인 사원
SELECT
	*
	FROM EMPLOYEES e
WHERE
	E.SALARY NOT IN (2500, 3500, 7000)
	AND E.JOB_ID IN ('SA_REP','ST_CLERK');

-- 2018/02/20 ~ 2018/05/01 사이에 고용된 직원들의 LAST_NAME, 사번(EMPLOYEE_ID), 고용일자(HIRE_DATE) 조회
SELECT E.LAST_NAME , E.EMPLOYEE_ID , E.HIRE_DATE 
FROM EMPLOYEES e 
WHERE E.HIRE_DATE >='2018-02-20' AND E.HIRE_DATE <='2018-05-01';

-- 2015 년에 고용된 사원 조회
SELECT *FROM EMPLOYEES e WHERE E.HIRE_DATE >='2015-01-01' AND E.HIRE_DATE <='2015-12-31';

-- 20 번 혹은 50번 부서에서 근무하며, 연봉이 5000~12000 사이인 직원들의
-- FIRST_NAME, LAST_NAME, 연봉 조회(오름차순)
SELECT
	FIRST_NAME,
	LAST_NAME,
	SALARY,
	DEPARTMENT_ID
FROM
	EMPLOYEES e
WHERE
	e.DEPARTMENT_ID IN (20, 50)
	AND SALARY BETWEEN 5000 AND 12000
ORDER BY
	SALARY;

-- 연봉이 5000~12000 사이가 아닌 직원들의 정보조회
SELECT
	*
	FROM EMPLOYEES e
WHERE
	SALARY NOT BETWEEN 5000 AND 12000;

-- 2018/02/20 ~ 2018/05/01 사이에 고용된 직원들의 LAST_NAME, 사번(EMPLOYEE_ID), 고용일자(HIRE_DATE) 조회
SELECT
	LAST_NAME,
	EMPLOYEE_ID ,
	HIRE_DATE
FROM
	EMPLOYEES e
WHERE
	HIRE_DATE BETWEEN '2018-02-20' AND '2018-05-01' ;
	
-- LIKE
-- LAST_NAME 에 U가 포함되는 사원들의 사번, LAST_NAME 조회
SELECT
	EMPLOYEE_ID ,
	LAST_NAME
FROM
	EMPLOYEES e
WHERE
	LAST_NAME LIKE '%u%'OR LAST_NAME LIKE '%U%';

-- LAST_NAME 의 네번째 글자가 A 인 사원들의 사번 ,LAST_NAME 조회
SELECT
	EMPLOYEE_ID ,
	LAST_NAME
FROM
	EMPLOYEES e
WHERE
	LAST_NAME LIKE '___a%';
--LAST_NAME 에 a 혹은 e 글자가 포함되는 사원들의 사번 ,LAST_NAME 조회
SELECT
	EMPLOYEE_ID ,
	LAST_NAME
FROM
	EMPLOYEES e
WHERE
	LAST_NAME LIKE '%a%'
	OR LAST_NAME LIKE '%e%'
ORDER BY
	LAST_NAME ;

--LAST_NAME 에 a 와 e 글자가 포함되는 사원들의 사번, LAST_NAME 조회
SELECT
	EMPLOYEE_ID ,
	LAST_NAME
FROM
	EMPLOYEES e
WHERE
	LAST_NAME LIKE '%a%'
	AND LAST_NAME LIKE '%e%'
ORDER BY
	LAST_NAME ;


-- IS NULL 
-- MANAGER_ID 가 없는 사원들의 LAST_NAME 및 JOB_ID 조회
SELECT
	LAST_NAME,
	JOB_ID
FROM
	EMPLOYEES e
WHERE
	MANAGER_ID IS NULL;

-- JOB_ID 가 ST_CLERK 가 아닌 사원이 없는 부서 조회
-- 단, 부서 번호가 NULL 인 경우는 제외한다.
SELECT DISTINCT DEPARTMENT_ID 
FROM EMPLOYEES e WHERE e.JOB_ID !='ST_CLERK' AND DEPARTMENT_ID IS NOT NULL; 

-- COMMISSION_PCT 가 NULL 이 아닌 사원들 중에서 COMMISSIN = SALARY*COMMISSION_PCT를 구한다
-- 사원번호, FIRST_NAME,JOB_ID 와 함께 조회

SELECT
	EMPLOYEE_ID,
	FIRST_NAME,
	JOB_ID,
	SALARY * COMMISSION_PCT AS COMMISSION
FROM
	EMPLOYEES e
WHERE
	COMMISSION_PCT IS NOT NULL
ORDER BY COMMISSION;

-- 부서 80 의 사원에 적용 가능한 세율 표시하기
-- LAST_NAME, SALARY, TAX_RATE 출력
-- TAX_RATE 는 SALARY / 2000 으로 나눈후 버림
--				해당 값이 0이면 0.0/1, 0.09/2, 0.20/3, 0.30/4, 0.40/5, 0.42/6, 0.44/ 그 외 0.45

SELECT LAST_NAME, SALARY,
DECODE(TRUNC(SALARY/2000),
	0,0.00,
	1,0.09,
	2,0.20,
	3,0.30,
	4,0.40,
	5,0.42,
	6,0.44,
	0.45
) AS TAX_RATE
FROM EMPLOYEES e;
			
-- 회사 내의 최대 연봉 및 최소 연봉의 차이 출력
SELECT MAX(E.SALARY) - MIN(E.SALARY) AS SAL_GAP
FROM EMPLOYEES e;
-- 매니저로 근무하는 사원들의 총 숫자를 출력
SELECT COUNT(DISTINCT E.MANAGER_ID) AS 매니저수
FROM EMPLOYEES e ;

--매니저가 없는 사원들은제외하고
--매니저가 관리하는 사원들 중에서 최소 급여를 받는 사원 조회
-- (매니저가 관리하는 사원 중에서 연봉이 6000 미만 제외)

SELECT MANAGER_ID, MIN(SALARY) 
FROM EMPLOYEES e 
GROUP BY MANAGER_ID 
HAVING MANAGER_ID IS NOT NULL AND MIN(SALARY) >= 6000;

--JOIN
-- 자신의 담당 매니저의 고용일보다 빠른 입사자 찾기
-- 사원번호, 입사일, 이름(LAST_NAME), 매니저아이디 출력
-- EMPLOYEES SELF 조인
SELECT E1.EMPLOYEE_ID , E1.HIRE_DATE, E1.LAST_NAME ,E1.MANAGER_ID,E2.HIRE_DATE 
FROM EMPLOYEES e1 JOIN EMPLOYEES e2 
ON E1.MANAGER_ID = E2.EMPLOYEE_ID AND E1.HIRE_DATE < E2.HIRE_DATE ;

-- 도시 이름이 T로 시작하는 지역에 사는 사원들의 정보 조회
-- 사원번호, 이름(LAST_NAME), 부서번호, 지역명
-- EMPLOYEES, DEPARTMENT, LOCATIONS 조인
SELECT E.EMPLOYEE_ID, E.LAST_NAME ,E.DEPARTMENT_ID, D.LOCATION_ID , L.CITY
FROM EMPLOYEES e JOIN DEPARTMENTS d ON E.DEPARTMENT_ID =D.DEPARTMENT_ID JOIN LOCATIONS l ON D.LOCATION_ID =L.LOCATION_ID 
WHERE L.CITY LIKE 'T%' ;

-- 각 부서별 사원 수, 평균 연봉(소수점 2자리까지) 조회
-- 부서명, 부서위치 아이디, 부서별 사원 수, 평균 연봉 출력
-- EMPLOYEES, DEPARTMENT 조인
SELECT D.DEPARTMENT_NAME ,D.LOCATION_ID ,COUNT(E.EMPLOYEE_ID) AS CNT, ROUND(AVG(E.SALARY),2) AS AVG_SAL
FROM EMPLOYEES e JOIN DEPARTMENTS d ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
GROUP BY D.DEPARTMENT_NAME ,D.LOCATION_ID ;


-- EXECUTIVE 부서에 근무하는 모든 사원들의 부서번호, 이름(LAST_NAME), JOB_ID 조회
-- EMPLOYEES, DEPARTMENT 조인
SELECT E.DEPARTMENT_ID ,E.LAST_NAME, E.JOB_ID 
FROM EMPLOYEES e JOIN DEPARTMENTS d ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
WHERE D.DEPARTMENT_NAME ='Executive';

-- 기존의 직무를 계속 하고 있는 사원 조회
-- 사원번호, JOB_ID 출력
-- EMPLOYEES, JOB_HISTORY 조인
SELECT E.EMPLOYEE_ID ,E.JOB_ID 
FROM EMPLOYEES e JOIN JOB_HISTORY jh ON E.EMPLOYEE_ID =JH.EMPLOYEE_ID AND E.JOB_ID =JH.JOB_ID ;

-- 각 사원별 소속부서에서 자신보다 늦게 고용되었으나 많은 급여를 받는 사원의 정보 조회
-- 부서번호, FIRST_NAME 과 LAST_NAME 을 연결하여 출력, 급여, 입사일 출력
-- EMPLOYEES SELF 조인

SELECT DISTINCT E.DEPARTMENT_ID,  (E.FIRST_NAME || '' || E.LAST_NAME), E.SALARY, E.HIRE_DATE 
FROM EMPLOYEES e JOIN EMPLOYEES e2 ON E.DEPARTMENT_ID = E2.DEPARTMENT_ID AND E.HIRE_DATE < E2.HIRE_DATE 
AND E.SALARY < E2.SALARY
ORDER BY E.DEPARTMENT_ID ;


-- 서브쿼리로 작성
-- EXECUTIVE 부서에 근무하는 모든 사원들의 부서번호, 이름(LAST_NAME), JOB_ID 조회
SELECT
	E.DEPARTMENT_ID ,
	E.LAST_NAME,
	E.JOB_ID
FROM
	EMPLOYEES e
WHERE
	(E.DEPARTMENT_ID,
	'Executive') IN (
	SELECT
		D.DEPARTMENT_ID,
		D.DEPARTMENT_NAME
	FROM
		DEPARTMENTS d);
		